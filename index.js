const { default: axios } = require('axios');
const fs = require('fs');
const {JSDOM} = require('jsdom');
const AXIOS = require('axios');
const CVE_URL =  "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=";
const ARGS = require('yargs').argv;
const { exit } = require('yargs');


let requestVuln = async (keyword) => {
    let resp = await axios.get(CVE_URL + keyword);
    return resp.data;
}

let scrapVuln = (resp) => {
    const document = new JSDOM(resp).window.document;
    const vulnTable = document.getElementById("TableWithRules").textContent;
    return vulnTable;
}

let help = () => {
    return JSON.stringify({
        "-f=filepath" : "specify file to use for vulnerability check",
        "-p=product1,product2" : "Specify all product",
        "--last" : "Get last vulnerabilities (default: last)",
        "-h" : "Print this help text"
    }, null, 4)
}

let parseArg = () => {
    return {
        'file' : (ARGS.f) ? ARGS.f : false,
        'products' : (ARGS.p) ? ARGS.p : false,
        'last' : ARGS.last,
        'help' : (ARGS.h) ? help() : false
    }
}

let getFileProducts = (filepath) => {
    try{
        let arr = fs.readFileSync(filepath, 'utf-8').split("\n");
        arr.pop();
        return arr;
    }catch (err) {
        console.error(err);
        exit(1);
    }
}

let getVuln = async (products, last) => {
        for(i in products){
            let prod = products[i];
            let resp = await requestVuln(prod);
            let vulnTable = scrapVuln(resp).split('\n');
            vulnTable = vulnTable.filter(function(entry) { return entry.trim() != ''; });
            vulnTable = vulnTable.map(elem => elem.trim());
            vulnTable.splice(0,2);
            let vulnerabilityDict = {}
            for(let i = 0; i < vulnTable.length; i+=2){
                vulnerabilityDict[vulnTable[i]] = vulnTable[i+1];
            }
            console.log("product : " + prod)
            console.log(JSON.stringify(vulnerabilityDict, null, 4));
        }
}

const checkNull = (arg) => {
    for(const [key, value] of Object.entries(arg)){
        if(value && key != 'last'){
            return false;
        }
    }
    exit(1, "No product or file specified");
}

let parser = () => {
    var argResult = parseArg();     
    if(!checkNull(argResult)){
        if(argResult.help){
            console.log(argResult.help);
            exit(0);
        } 
        let products = [];
        if(argResult.file){
            products = getFileProducts(argResult.file);
        }
        if(argResult.products){
            products = (argResult.products.length) > 1 ? argResult.products.split(",") : argResult.products;
        }
       return getVuln(products, argResult.last);
    }
    return null
}

let main = () => {
    parser();
}

main();