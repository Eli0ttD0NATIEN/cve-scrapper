const ARGS = require('yargs').argv;
const { exit } = require('yargs');

class CmdParser{
    constructor(ARGS) {
        this.ARGS = ARGS;
    }

    checkNull = (arg) => {
        for(const [key, value] of Object.entries(arg)){
            if(value && key != 'last'){
                return false;
            }
        }
        exit(1, "No product or file specified");
    }

    parseProducts = () => {
        var argResult = parseArg();     
        if(!checkNull(argResult)){
            if(argResult.help){
                console.log(argResult.help);
                exit(0);
            } 
            let products = [];
            if(argResult.file){
                products = getFileProducts(argResult.file);
            }
            if(argResult.products){
                products = (argResult.products.length) > 1 ? argResult.products.split(",") : argResult.products;
            }
            return {"products": products, "last": argResult.last}
        }
        return null
    }

    getFileProducts = (filepath) => {
        try{
            let arr = fs.readFileSync(filepath, 'utf-8').split("\n");
            arr.pop();
            return arr;
        }catch (err) {
            console.error(err);
            exit(1);
        }
    }

    help = () => {
        return JSON.stringify({
            "-f=filepath" : "specify file to use for vulnerability check",
            "-p=product1,product2" : "Specify all product",
            "--last" : "Get last vulnerabilities (default: last)",
            "-h" : "Print this help text"
        }, null, 4)
    }

    parseArg = () => {
        return {
            'file' : (ARGS.f) ?? false,
            'products' : (ARGS.p) ?? false,
            'last' : ARGS.last,
            'help' : (ARGS.h) ? help() : false
        }
    }
}