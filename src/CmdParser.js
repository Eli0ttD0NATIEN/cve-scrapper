"use strict";

const { exit } = require('yargs');
const { readFileSync } = require('fs');

class CmdParser{
    constructor(ARGS) {
        this.ARGS = ARGS;
        this.parsedArgs = this.parseArg();
        this.param = this.defineParam();
    }

    parseArg = () => {
        return {
            'file' : (this.ARGS.f) ?? false,
            'products' : (this.ARGS.p) ?? false,
            'last' : this.ARGS.last,
            'help' : (this.ARGS.h) ? this.help() : false
        }
    }

    checkNull = (arg) => {
        for(const [key, value] of Object.entries(arg)){
            if(value && key != 'last'){
                return false;
            }
        }
        exit(1, "No product or file specified");
    }

    defineParam = () => {
        if(!this.checkNull(this.parsedArgs)){
            if(this.parsedArgs.help){
                console.log(this.parsedArgs.help);
                exit(0);
            } 
            let products = [];
            if(this.parsedArgs.file){
                products = this.readFileProducts(this.parsedArgs.file);
            }
            if(this.parsedArgs.products){
                products = (this.parsedArgs.products.length) > 1 ? this.parsedArgs.products.split(",") : this.parsedArgs.products;
            }
            return {"products": products, "last": this.parsedArgs.last};
        }
        return null;
    }

    getParam = () => {
        return this.param;
    }

    readFileProducts = (filepath) => {
        try{
            let arr = readFileSync(filepath, 'utf-8').split("\n");
            arr.pop();
            return arr;
        }catch (err) {
            console.error(err);
            exit(1);
        }
    }

    help = () => {
        return JSON.stringify({
            "-f=filepath" : "specify file to use for vulnerability check",
            "-p=product1,product2" : "Specify all product",
            "--last" : "Get last vulnerabilities (default: ALL)",
            "-h" : "Print this help text"
        }, null, 4)
    }
}

module.exports.CmdParser = CmdParser;